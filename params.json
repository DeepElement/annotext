{"name":"AnnoText","tagline":"A document-based attribution engine for node.","body":"#AnnoText\r\n\r\n  A document-based attribution engine for [node](http://nodejs.org).\r\n\r\n[![Build Status](https://travis-ci.org/DeepElement/AnnoText.png?branch=master)](https://travis-ci.org/DeepElement/AnnoText)\r\n\r\n\r\n##Philosophy\r\n\r\n* The Content itself drives the Version history\r\n* Human & Machine readable YAML storage of document attributions\r\n* Fully serializable (Momento)\r\n\r\n\r\n# Usage\r\n\r\n##Create a Document\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\t\t\t\r\n\r\n**AnnoText**\r\n\r\n\t---\r\n\tannotations:\r\n\t  - { range_start: 0, range_end: 26, created: '2013-11-09T18:30:56.080Z', user: toddpi314, revision: v0.1 }\r\n\tcreated: '2013-11-09T18:30:56.080Z'\r\n\t---\r\n\tHere is some sample content\r\n\r\n##Update an existing document\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\tvar updatedDoc = annotext.update(\r\n\t\t\t\t'Here is some sample \"that I added\" content',\r\n\t\t\t\tannoTextDoc,\r\n\t\t\t\t'VictorHugo',\r\n\t\t\t\t'v0.2');\r\n\t\t\r\n\r\n**AnnoText**\r\n\r\n\t---\r\n\tannotations:\r\n\t  - { created: '2013-11-09T18:45:43.511Z', user: toddpi314, revision: v0.1, range_start: 0, range_end: 20 }\r\n\t  - { created: '2013-11-09T18:45:43.513Z', user: VictorHugo, revision: v0.2, range_start: 21, range_end: 35 }\r\n\t  - { created: '2013-11-09T18:45:43.511Z', user: toddpi314, revision: v0.1, range_start: 36, range_end: 42 }\r\n\tcreated: '2013-11-09T18:45:43.514Z'\r\n\t---\r\n\tHere is some sample \"that I added\" content\r\n\r\n#API\r\n##Create\r\nCreate an AnnoText document without any historical versions of the document. \r\n\r\n_Arguments_\r\n\t- content - document content\r\n\t- userKey - user key of creator\r\n\t- revisionKey - revision key of first impression\r\n\t- (Optional) parentRevisionKey - revision key of parent if derived\r\n\t- (Optional) createDateTime\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content', // Content\r\n\t\t\t\t\t'toddpi314', // User key\r\n\t\t\t\t\t'v0.1',  // Current Revision\r\n\t\t\t\t\t'v0.0'); // Parent revision optional\t\t\r\n\r\n##Update\r\nUpdate an existing document with the changed content. \r\n\r\n_Arguments_\r\n\t- newContent - updated document content\r\n\t- annotextDoc - pre-existing annotext document\r\n\t- userKey - user key of editor\r\n\t- revisionKey - revision key of new revision\r\n\t- (Optional) editDateTime - DateTime of the edit\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\tvar updatedDoc = annotext.update(\r\n\t\t\t\t'Here is some sample \"that I added\" content',\r\n\t\t\t\tannoTextDoc,\r\n\t\t\t\t'VictorHugo',\r\n\t\t\t\t'v0.2');\r\n\r\n\r\n##Parse\r\nParse an existing document and get a pretty \"ok\" api for accessing header/content.\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\tvar parsedDoc = annotext.parse(annoTextDoc);\r\n\r\n\r\n\r\n##GetRevisionsByUser\r\nGet a list of revisions based on the user key used in prior attribution entries.\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\t// returns array of user keys\r\n\tvar users = annotext.getRevisionsByUser(annoTextDoc)\r\n\r\n\r\n##GetDistinctRevisionDates\r\nGet a list of all revision dates relevant to the AnnoText document.\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\t// returns array of dates\r\n\tvar dates = annotext.getDistinctRevisionDates(annoTextDoc)\r\n\r\n##GetDistinctRevisionKeys\r\nGet a list of distinct revision keys relevant to the AnnoText document.\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\t// returns array of revision Keys\r\n\tvar revisionKeys = annotext.getDistinctRevisionKeys(annoTextDoc)\r\n\r\n##GetDistinctUserKeys\r\nGet a list of distinct user keys relevant to the AnnoText document.\r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\t// returns array of revision Keys\r\n\tvar userKeys = annotext.getDistinctUserKeys(annoTextDoc)\r\n\r\n##GetDistinctRevisions\r\nGet a list of distinct revisions relevant to the AnnoText document.\r\nRevisions contain \r\n\r\n**Usage**\r\n\r\n\tvar annotext = new (require('annotext'))();\r\n\t\r\n\t// create a basic document\r\n\tvar annoTextDoc = annotext.create(\r\n\t\t\t\t\t'Here is some sample content',\r\n\t\t\t\t\t'toddpi314', \r\n\t\t\t\t\t'v0.1');\r\n\t\t\t\t\t\r\n\t// returns array of revisions\r\n\tvar revisions = annotext.getDistinctRevisions(annoTextDoc)\r\n\r\n#Contact & Issues\r\n\r\nIssues: https://github.com/DeepElement/AnnoText/issues\r\n\r\nor,<todd@deepelement.com>\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2008-2014 Todd Morrison &lt;todd@deepelement.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-18193655-3","note":"Don't delete this file! It's used internally to help with page regeneration."}